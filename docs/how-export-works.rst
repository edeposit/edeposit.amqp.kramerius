How Export to Kramerius Works
===================================================================

Data Package
----------------------

Data package is sent do AMQP service ``edeposit.amqp.kramerius``.

It consists of all data that Kramerius needs:

:original file:  
   - ``PDF`` file with ePublication
   - the file contains main content of en ePublication

:image source file:  
   - main image file
   - ``preview file`` and ``thumbnail file`` are generated online from this file
   - format ``jpeg``
   - it is named: ``preview.jpeg``

:preview file:  
   - Kramerius needs to have at least one image to show.
   - user clicks on a preview at Kramerius
   - ... and Kramerius provides main PDF to view a content of an
     ePublication

   .. note::
      the file is generated by ``image server``. The data package
      consists of a link to image server. It generates a preview file
      on demand.

:thumbnail file:  
   - Kramerius uses it as thumbnail

   .. note::
      the file is generated by ``image server``. The data package
      consists of a link to image server. It generates a thumbnail file
      on demand.

:FOXML file:
   - in a format ``FOXML``
   - it contains all informations about attached files
   - it contains all informations about ePublication
   - it contains all links to ``original file``, ``preview file``,
     ``thumbnail file``
   - it contains all informations about tree where ePublication is stored

.. note::

   Each package has its own ``UUID``. Package file is named by its own UUID. for e.g.

   ``e65d9072-2c9b-11e5-99fd-b8763f0a3d61.zip``

Structure of a Data Package
-------------------------------------------------

   ``e65d9072-2c9b-11e5-99fd-b8763f0a3d61.zip``

::

   jan@jan-XPS-L421X:~/$ tree e65d9072-2c9b-11e5-99fd-b8763f0a3d61
   e65d9072-2c9b-11e5-99fd-b8763f0a3d61/
   ├── img
   │   ├── 8025102254-the-robot-and-the-baby.pdf
   │   ├── 8025102254-the-robot-and-the-baby_001.jpeg
   └── xml
       └── 8025102254-the-robot-and-the-baby.xml

   2 directories, 3 files


Type of links at FOXML
----------------------------------------


:link to FOXML file:
   - it is used for import
   - eDeposit removes it afrer import finished with success

:link to data for Kramerius:
   - it is used to retrieve

:link to original file:
   - Kramerius shows it to users

External relations at FOXML
---------------------------------------

Location of an ePublication at Kramerius is described by ``RelsExt``
section.

This sections must contain of full path to ePublication at Kramerius.

All new levels will be generated.

   
Where It is Stored
----------------------------------------

:edeposit storage:
   - it offers all data packages
   - it offers source image for ``image server`` to generate thumbnails and previews

:kramerius server:
   - it stores ``FOXML`` file of a data package to import
     

What is Called
--------------------------

1. AMQP to prepare data package

   eDeposit Plone applications calls ``AMQP`` service to export data
   to ``Kramerius server``

   - creates ``first page image``
   - converts ``first page image`` to ``jpeg2000``

2. scp to ``Storage server``
   
   An application sends all data for ``Kramerius server`` to ``AMQP``
   ``Storage server``

3. scp to kramerius

   AMQP service stores ``FOXML`` file with all links and ``FOXML``
   file to ``kramerius server``

4. REST API at Kramerius server

   - an application notifies a ``Kramerius server`` to start import
   - an application asks ``Kramerius server`` whether import
     finished successfully

5. AMQP service removes data
   
   that were imported by ``Kramerius server`` successfully

6. sends ``AMQP`` response message

   an application sends back notification message by ``AMQP``

Directory structure of an archive at ``Storage server``
-------------------------------------------------------------------------------------------------------

Archive helps to find older data 

Monography
```````````

::

   jan@jan-XPS-L421X:~/work/edeposit.amqp.kramerius/resources$ tree archive
   archive
   └── 1856
       └── e65d9072-2c9b-11e5-99fd-b8763f0a3d61
       ├── img
       │   └── 8025102254-the-robot-and-the-baby_001.jpg
       └── xml
           └── 8025102254-the-robot-and-the-baby.xml

   4 directories, 2 files

1856 means ``mods:dateIssued`` of an ePublication.

Multi monography
``````````````````

Tree of an monography is generated at ``Aleph``.

Storage follows tree structure for given ePeriodical.


Limitations of import process
------------------------------------------------------

eDeposit should start just one import pocess at a time. After it is finished it can star another one.

It can store into import directory more packages to import. They are wainting for edeposit to start  import process.

It is started once eDeposit calls ``REST API``.
